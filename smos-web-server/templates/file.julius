function initWebsocket() {
  // Build the websocket
  const loc = window.location;
  var new_uri = "@{InstanceR ts}".replace(/^http/i, "ws");
  // console.log("Connecting to: " + new_uri);
  const socket = new WebSocket(new_uri);

  socket.onopen = function(e) {
    // console.log("Connected: ");
    // console.log(e);
  }
  // Listen for the close connection event
  socket.onclose = function(e) {
    console.log("Disconnected: ");
    console.log(e);

    // Remove the terminal and go back to the previous page.
    terminal.parentNode.removeChild(terminal);
    window.location.replace("@{HomeR}");
  }

  // Listen for connection errors
  socket.onerror = function(e) {
    console.log("Error: ");
    console.log(e);
  }

  // Listen for new messages arriving at the client

  // Do this to debug:
  // socket.onmessage = function(e) {
  //   console.log("Got a message:");
  //   console.log(e.data);
  // }

  return socket;
}


window.onload = async function() {
  // Get the container element
  terminalContainer = document.querySelector('#terminal')

  
  const col_S_rebase03 = '#002b36';
  const col_S_rebase02 = '#073642';
  const col_S_rebase01 = '#586e75';
  const col_S_rebase00 = '#657b83';
  const col_S_rebase0  = '#839496';
  const col_S_rebase1  = '#93a1a1';
  const col_S_rebase2  = '#eee8d5';
  const col_S_rebase3  = '#fdf6e3';
  const col_S_yellow   = '#b58900';
  const col_S_orange   = '#cb4b16';
  const col_S_red      = '#dc322f';
  const col_S_magenta  = '#d33682';
  const col_S_violet   = '#6c71c4';
  const col_S_blue     = '#268bd2';
  const col_S_cyan     = '#2aa198';
  const col_S_green    = '#859900';

  const light = false;

  var col_S_base03;
  var col_S_base02;
  var col_S_base01;
  var col_S_base00;
  var col_S_base0;
  var col_S_base1;
  var col_S_base2;
  var col_S_base3;

  if (light) {
    col_S_base03 = col_S_rebase3;
    col_S_base02 = col_S_rebase2;
    col_S_base01 = col_S_rebase1;
    col_S_base00 = col_S_rebase0;
    col_S_base0  = col_S_rebase00;
    col_S_base1  = col_S_rebase01;
    col_S_base2  = col_S_rebase02;
    col_S_base3  = col_S_rebase03;
  } else {
    col_S_base03 = col_S_rebase03;
    col_S_base02 = col_S_rebase02;
    col_S_base01 = col_S_rebase01;
    col_S_base00 = col_S_rebase00;
    col_S_base0  = col_S_rebase0;
    col_S_base1  = col_S_rebase1;
    col_S_base2  = col_S_rebase2;
    col_S_base3  = col_S_rebase3;
  }
  // Create a terminal
  const options = {
    'cursorBlink': true,
    'fontWeight': '500',
    'fontWeightBold': '900',
    'fontFamily': 'monospace',
    'theme': {
      'foreground': col_S_base00,
      'background': col_S_base03,
      'cursor': col_S_base1,
      'cursorAccent': col_S_base02,

      'black': col_S_base02,
      'brightBlack': col_S_base03,

      'red': col_S_red,
      'brightRed': col_S_orange,

      'green': col_S_green,
      'brightGreen': col_S_base01,

      'yellow': col_S_yellow,
      'brightYellow': col_S_base00,

      'blue': col_S_blue,
      'brightBlue': col_S_base0,

      'magenta': col_S_magenta,
      'brightMagenta': col_S_violet,

      'cyan': col_S_cyan,
      'brightCyan': col_S_base1,

      'white': col_S_base2,
      'brightWhite': col_S_base3
    }
  };
  const term = new Terminal(options);
  window.term = term;

  // Load the attach addon to attach to the remote instance via websockets
  socket = initWebsocket();
  const attachAddon = new AttachAddon.AttachAddon(socket);
  term.loadAddon(attachAddon);


  // Load the fit addon
  const fitAddon = new FitAddon.FitAddon();
  term.loadAddon(fitAddon);


  // Open the terminal
  term.open(terminalContainer);

  // Fit the to the container
  fitAddon.fit();
  term.focus();


  // A function to resize the terminal
  const resize = () => {
    // console.log("trying to resize");

    // We avoid using fitAddon.fit() as that would incur the expensive dimension calculations twice
    const dimensions = fitAddon.proposeDimensions();

    // Do the resizing locally
    term.resize(dimensions.cols, dimensions.rows);

    // Do the resizing remotely
    $.ajax({
      type: "POST",
      url: "@{ResizeR}",
      data: JSON.stringify({
        "width": term.cols,
        "height": term.rows
      }),
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      success: function(data){
        // console.log("Succeeded in resizing the terminal.");
        // console.log(data);
      },
      error: function(data){
        console.log("Failed to resize the terminal.");
        console.log(data);
        resize(); // Try again
      }
    });
  };

  

  // Make sure to resize when the window changes in size
  window.addEventListener('resize', resize);

  // resize initially
  resize();
};
